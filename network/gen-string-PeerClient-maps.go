// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package network

import "sync"

type StringPeerClientSyncMap struct {
	inner sync.Map
}

func (m *StringPeerClientSyncMap) Store(k string, v *PeerClient) {
	m.inner.Store(k, v)
}

func (m *StringPeerClientSyncMap) Load(k string) (*PeerClient, bool) {
	val, ok := m.inner.Load(k)
	if !ok {
		return nil, false
	}

	return val.(*PeerClient), true
}

func (m *StringPeerClientSyncMap) Range(cb func(string, *PeerClient) bool) {
	m.inner.Range(func(k interface{}, v interface{}) bool {
		return cb(k.(string), v.(*PeerClient))
	})
}

func (m *StringPeerClientSyncMap) Delete(key string) {
	m.inner.Delete(key)
}

func (m *StringPeerClientSyncMap) LoadOrStore(k string, v *PeerClient) (*PeerClient, bool) {
	actual, loaded := m.inner.LoadOrStore(k, v)
	if actual != nil {
		return actual.(*PeerClient), loaded
	} else {
		return nil, loaded
	}
}
